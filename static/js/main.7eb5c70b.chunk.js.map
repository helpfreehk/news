{"version":3,"sources":["Header.js","Footer.js","Home.js","About.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","state","data","className","Container","to","React","Component","Footer","scrollToTop","scroll","href","onClick","this","Info","Home","setTimeout","loadingBarAdd","bind","Tabletop","init","key","callback","googleData","setState","loadingBarComplete","simpleSheet","onMouseMove","mousemove","onTouchMove","touchmove","id","map","obj","title","content","About","App","value","loadingBarProgress","onLoaderFinished","progress","height","color","exact","path","render","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7eb5c70b.chunk.js","sourcesContent":["import React from \"react\";\nimport { Route, Link } from \"react-router-dom\";\nimport { Container, Row, Col } from 'react-bootstrap';\n\nclass Header extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: []\n    };\n  }\n\n  render() {\n    return (\n      <div className=\"header\">\n        <Container>\n          <div className=\"h-1\">\n            <div className=\"h-logo\">\n              <h1>Free HK</h1>\n            </div>\n            <ul className=\"nav\">\n              <li>\n                <Link to=\"/\">Home</Link>\n              </li>\n              <li>\n                <Link to=\"/timeline\">Timeline</Link>\n              </li>\n              <li>\n                <Link to=\"/events\">Events</Link>\n              </li>\n              <li>\n                <Link to=\"/about\">About</Link>\n              </li>\n              <li>\n                <Link to=\"/download\">Download</Link>\n              </li>\n            </ul>\n          </div>\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default Header;\n","import React from \"react\";\nimport { Container } from 'react-bootstrap';\nimport * as Scroll from 'react-scroll';\nimport { animateScroll as scroll, scrollSpy, scroller } from 'react-scroll'\n\nclass Footer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: []\n    };\n  }\n\n  scrollToTop = () => {\n    scroll.scrollToTop();\n  }\n\n  render() {\n    return (\n      <div className=\"footer\">\n        <Container>\n        Email: <a href=\"mailto:helpfreehk@gmail.com\">helpfreehk@gmail.com</a>\n        </Container>\n        <button onClick={this.scrollToTop} className=\"totop\">scroll to top</button>\n      </div>\n    );\n  }\n}\n\nexport default Footer;\n","import React from \"react\";\nimport Tabletop from 'tabletop';\n\nclass Home extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: []\n    };\n  }\n\n  componentDidMount() {\n    setTimeout(function () {\n      this.props.loadingBarAdd(20);\n    }.bind(this),100);\n    Tabletop.init({\n      key: '1CNnSjBUnSRoT_dW5aJwKmzbWqf3_80PhM9RNBMYfgM8',\n      callback: googleData => {\n        this.setState({\n          data: googleData\n        });\n        this.props.loadingBarComplete();\n      },\n      simpleSheet: true\n    })\n  }\n\n  render() {\n    const { data } = this.state\n    return (\n      <div onMouseMove={this.mousemove} onTouchMove={this.touchmove}>\n        <div className=\"homeWp\">\n\n          <Info />\n\n        <div id=\"employee-details\">\n          {\n            data.map(obj => {\n              return (\n                <div key={obj.title}>\n                  <p>{obj.title}</p>\n                  <p>{obj.content}</p>\n                </div>\n              )\n            })\n          }\n        </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nfunction Info() {\n  return (\n    <div>\n    </div>\n  );\n}\n\nexport default Home;\n","import React from \"react\";\nimport { Route, Link } from \"react-router-dom\";\n\nclass About extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: []\n    };\n  }\n\n  componentDidMount() {\n    setTimeout(function () {\n      this.props.loadingBarComplete();\n    }.bind(this),100);\n  }\n\n  render() {\n    return (\n      <div>\n      About\n      </div>\n    );\n  }\n}\n\nexport default About;\n","import React from \"react\";\nimport { Route, Link } from \"react-router-dom\";\nimport { HashRouter } from 'react-router-dom';\nimport Header from \"./Header.js\";\nimport Footer from \"./Footer.js\";\nimport Home from \"./Home.js\";\nimport About from \"./About.js\";\nimport LoadingBar from 'react-top-loading-bar'\n\nexport default class App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      loadingBarProgress: 0\n    }\n  }\n\n  loadingBarAdd = value => {\n    this.setState({\n      loadingBarProgress: this.state.loadingBarProgress + value\n    })\n  }\n  loadingBarComplete = () => {\n    this.setState({ loadingBarProgress: 100 })\n  }\n  onLoaderFinished = () => {\n    this.setState({ loadingBarProgress: 0 })\n  }\n\n  render() {\n    return (\n      <HashRouter>\n        <div>\n          <LoadingBar\n            progress={this.state.loadingBarProgress}\n            height={3}\n            color='red'\n            onLoaderFinished={() => this.onLoaderFinished()}\n          />\n          <Header />\n\n          <main>\n            <Route exact path=\"/\" render={(props) => <Home {...props} loadingBarAdd={this.loadingBarAdd} loadingBarComplete={this.loadingBarComplete} />} />\n            <Route path=\"/about\" render={(props) => <About {...props} loadingBarAdd={this.loadingBarAdd} loadingBarComplete={this.loadingBarComplete} />} />\n          </main>\n\n          <Footer />\n        </div>\n      </HashRouter>\n    )\n  }\n}\n\nfunction Topic({ match }) {\n  return <h3>Requested Param: {match.params.id}</h3>;\n}\n\nfunction Topics({ match }) {\n  return (\n    <div>\n      <h2>Topics</h2>\n\n      <ul>\n        <li>\n          <Link to={`${match.url}/components`}>Components</Link>\n        </li>\n        <li>\n          <Link to={`${match.url}/props-v-state`}>Props v. State</Link>\n        </li>\n      </ul>\n\n      <Route path={`${match.path}/:id`} component={Topic} />\n      <Route\n        exact\n        path={match.path}\n        render={() => <h3>Please select a topic.</h3>}\n      />\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}